import 'dart:async';
import 'dart:convert';
import 'dart:developer';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:http/http.dart' as http;
import 'package:n_c_ds_registry_dashboard/pages/patient_n_c_d/patient_n_c_d_widget.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'dart:js' as js;

class NCDsgetX extends GetxController {
  // final baseurl = 'http://192.168.30.73:8000';

  // final baseurl = 'http://127.0.0.1:18001';
  // final client = http.Client();
  // RxList<Map<String, dynamic>> summaryList = <Map<String, dynamic>>[].obs;

  // RxString apiToken = ''.obs;
  // RxBool isLoading = false.obs;
  int pageSize = 20;
  late String baseurl;
  late String username;
  late String password;
  final client = http.Client();
  RxList<Map<String, dynamic>> summaryList = <Map<String, dynamic>>[].obs;
  RxString apiToken = ''.obs;
  RxBool isLoading = false.obs;

  String? userLogin;
  String? hospitalCode;
  String? hospitalName;
  String? scopeList;
  String? cid = '';
  // String? query = '';
  // String? querylv4 = '';
  String? check_access_level = '';
  List<String> query = [];
  List<String> queryprovince = [];
  List<String> querylv4 = [];

  RxBool isInitializing = false.obs;
  RxBool isRefreshingToken = false.obs;

  Timer? _initTimer;

  // var searchBy = 'name'.obs; // 'name' ‡∏´‡∏£‡∏∑‡∏≠ 'cid'

  @override
  void onInit() {
    super.onInit();

    // ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡πà‡∏≤‡∏à‡∏≤‡∏Å JS
    baseurl = EnvService.apiUrl;
    username = EnvService.username;
    password = EnvService.password;

    // //debugPrint('üåê baseurl: $baseurl');
    // //debugPrint('üë§ username: $username');
    _scheduleInitialization();
  }

  void _scheduleInitialization() {
    _initTimer?.cancel();
    _initTimer = Timer(Duration(milliseconds: 500), () {
      if (!isInitializing.value) {
        initializeData();
      }
    });
  }

  // ‡πÅ‡∏¢‡∏Å‡∏Å‡∏≤‡∏£ initialize ‡∏≠‡∏≠‡∏Å‡∏°‡∏≤
  Future<void> initializeData() async {
    if (isInitializing.value) return;

    isInitializing.value = true;

    try {
      // 1. Auth ‡∏Å‡πà‡∏≠‡∏ô
      await callAuthAPI();

      // 2. ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
      await _loadLoginData();

      // 3. ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
      await _loadEssentialData();
    } catch (e) {
      print('üö´ Error during initialization: $e');
    } finally {
      isInitializing.value = false;
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
  Future<void> _loadEssentialData() async {
    try {
      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
      await Future.wait([
        fetchGroupByCdCode(fiscalYear: 0),
        fetchGroupByGender(fiscalYear: 0),
        fetchGroupByRegionAndCd(fiscalYear: 0),
        fetchAllSubmissionData(fiscalYear: 0),
      ]);

      // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡πÅ‡∏ö‡∏ö lazy loading
      _loadSecondaryData();
    } catch (e) {
      print('üö´ Error loading essential data: $e');
    }
  }

  // ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≠‡∏á‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Å UI
  void _loadSecondaryData() {
    Future.delayed(Duration(milliseconds: 1000), () async {
      try {
        await fetchRegionRatePer1000(fiscalYear: 0);
        await fetchGroupByRegion(fiscalYear: 0);
        await fetchGroupByRegionAndCd(fiscalYear: 0);
      } catch (e) {
        print('üö´ Error loading secondary data: $e');
      }
    });
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user_login
  Future<String> _getUserLogin() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('user_login') ?? '-'; // ‡∏´‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏à‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô "-"
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hospital_code
  Future<String> _getHospitalCode() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('hospital_code') ?? '-';
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• hospital_name
  Future<String> _getHospitalName() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('hospital_name') ?? '-';
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• scope_list
  Future<String> _getScopeList() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('scope_list') ?? '-';
  }

  Future<String> _getcid() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    return prefs.getString('cid') ?? '-';
  }

  Future<List<String>> getProvinceQueryParams() async {
    SharedPreferences prefs = await SharedPreferences.getInstance();
    // final codes = prefs.getStringList('org_province_codes') ?? [];
    return prefs.getStringList('org_province_codes') ?? [];
    // return codes.map((c) => 'org_province_code=$c').join('&');
  }

  Future<List<String>> getProvinceQuerylv4Params() async {
    // final prefs = await SharedPreferences.getInstance();
    // final codes = prefs.getStringList('access_level4_province_codes') ?? [];
    // return codes.map((c) => 'org_province_code=$c').join('&');
    SharedPreferences prefs = await SharedPreferences.getInstance();
    // final codes = prefs.getStringList('org_province_codes') ?? [];
    return prefs.getStringList('access_level4_province_codes') ?? [];
  }

  Future<String> getCheckAccessLevel() async {
    final prefs = await SharedPreferences.getInstance();
    return prefs.getString('check_access_level') ?? '1';
  }

  Future<void> _loadLoginData() async {
    userLogin = await _getUserLogin();
    hospitalCode = await _getHospitalCode();
    hospitalName = await _getHospitalName();
    scopeList = await _getScopeList();
    cid = await _getcid();

    final List<String> query2 = await getProvinceQueryParams();
    print('org_province_codes: $query2');
    query = query2.map((e) => e.toString()).toList();
    final List<String> querylv42 = await getProvinceQuerylv4Params();
    querylv4 = querylv42.map((e) => e.toString()).toList();
    check_access_level =
        // '5';
        await getCheckAccessLevel();
    // print('User Login: $userLogin');
    // print('Hospital Code: $hospitalCode');
    // print('Hospital Name: $hospitalName');
    // print('Scope List: $scopeList');

    print('querylv4: $querylv4');

    // ‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏≥‡∏™‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
  }

  // Rx ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÉ‡∏ä‡πâ‡πÉ‡∏ô setState
  // ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á (cd_code: 002)
  RxString diseaseHypertensionDisplay = ''.obs;
  RxInt diseaseHypertensionCount = 0.obs;
  RxDouble diseaseHypertensionPercent = 0.0.obs;

// ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô (cd_code: 001)
  RxString diseaseDiabetesDisplay = ''.obs;
  RxInt diseaseDiabetesCount = 0.obs;
  RxDouble diseaseDiabetesPercent = 0.0.obs;

// ‡∏≠‡πâ‡∏ß‡∏ô (cd_code: 027)
  RxString diseaseObesityDisplay = ''.obs;
  RxInt diseaseObesityCount = 0.obs;
  RxDouble diseaseObesityPercent = 0.0.obs;

// ‡πÑ‡∏ï (cd_code: 009)
  RxString diseaseKidneyDisplay = ''.obs;
  RxInt diseaseKidneyCount = 0.obs;
  RxDouble diseaseKidneyPercent = 0.0.obs;
//‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à
  RxString diseaseHeartDisplay = ''.obs;
  RxInt diseaseHeartCount = 0.obs;
  RxDouble diseaseHeartPercent = 0.0.obs;
//‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á
  RxString diseaseStrokeDisplay = ''.obs;
  RxInt diseaseStrokeCount = 0.obs;
  RxDouble diseaseStrokePercent = 0.0.obs;

// ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á (cd_code: 014)
  RxString diseaseCholesterolDisplay = ''.obs;
  RxInt diseaseCholesterolCount = 0.obs;
  RxDouble diseaseCholesterolPercent = 0.0.obs;

// ‡∏ñ‡∏∏‡∏á‡∏•‡∏°‡πÇ‡∏õ‡πà‡∏á‡∏û‡∏≠‡∏á (cd_code: 008)
  RxString diseaseEmphysemaDisplay = ''.obs;
  RxInt diseaseEmphysemaCount = 0.obs;
  RxDouble diseaseEmphysemaPercent = 0.0.obs;

// ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á (cd_code: 006)
  RxString diseaseCancerDisplay = ''.obs;
  RxInt diseaseCancerCount = 0.obs;
  RxDouble diseaseCancerPercent = 0.0.obs;

  // ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (cd_code: 026)
  RxString e_cigaretteDisplay = ''.obs;
  RxInt e_cigaretteCount = 0.obs;
  RxDouble e_cigarettePercent = 0.0.obs;

//-------------------------------patient NCDs
  RxList<Map<String, dynamic>> ncdList = <Map<String, dynamic>>[].obs;
  RxInt currentPage = 1.obs;
  RxInt totalPages = 1.obs;
  RxBool isNCDLoading = false.obs;
  var nameFilter = ''.obs; // ‡πÄ‡∏Å‡πá‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤

  // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ filter ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
  var lastName = ''.obs;
  var lastCid = ''.obs;
  var lastCdCode = ''.obs;
  var laststatus = ''.obs;
  DateTime? lastStartDate;
  DateTime? lastEndDate;

  // Future<void> callAuthAPI() async {
  //   final url = Uri.parse('$baseurl/api/auth');
  //   final headers = {
  //     'Content-Type': 'application/json'
  //   };
  //   final body = jsonEncode({
  //     "username": username,
  //     "password": password
  //   });

  //   try {
  //     isLoading.value = true;
  //     final response = await client.post(url, headers: headers, body: body);
  //     if (response.statusCode == 200) {
  //       final responseData = jsonDecode(response.body);
  //       apiToken.value = responseData['access_token'];
  //       // apiToken.value = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJtb3BoIiwiZXhwIjoxNzUzMTAyMDkyfQ.LTRbxlTGdJ2jfi3MAMXhI0EKhh9eFdBSprmndJAMpeE";

  //       final prefs = await SharedPreferences.getInstance();
  //       await prefs.setString('apiToken', apiToken.value);

  //       // //debugPrint('‚úÖ Auth Success: ${response.body}');
  //       await Future.delayed(Duration(milliseconds: 100));
  //       await _loadLoginData();
  //       await fetchGroupByCdCode(fiscalYear: 0); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏´‡∏•‡∏±‡∏á auth
  //       await fetchGroupByGender(fiscalYear: 0);
  //       await fetchRegionRatePer1000(fiscalYear: 0);
  //       await fetchGroupByRegion(fiscalYear: 0);

  //       // ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ fetchGroupByRegionAndCd
  //       await fetchGroupByRegionAndCd(fiscalYear: 0);
  //       await fetchAllSubmissionData(fiscalYear: 0);

  //       await fetchNCDList();
  //     } else {
  //       //debugPrint('‚ùå Auth Failed: ${response.statusCode} ${response.body}');
  //     }
  //   } catch (e) {
  //     //debugPrint('üö´ Error calling API: $e');
  //   } finally {
  //     isLoading.value = false;
  //   }
  // }

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á callAuthAPI
  Future<void> callAuthAPI() async {
    if (isRefreshingToken.value) {
      // ‡∏ñ‡πâ‡∏≤‡∏Å‡∏≥‡∏•‡∏±‡∏á refresh ‡∏≠‡∏¢‡∏π‡πà ‡πÉ‡∏´‡πâ‡∏£‡∏≠
      await Future.doWhile(() async {
        await Future.delayed(Duration(milliseconds: 100));
        return isRefreshingToken.value;
      });
      return;
    }

    isRefreshingToken.value = true;

    final url = Uri.parse('$baseurl/api/auth');
    final headers = {
      'Content-Type': 'application/json'
    };
    final body = jsonEncode({
      "username": username,
      "password": password
    });

    try {
      isLoading.value = true;
      final response = await client.post(url, headers: headers, body: body);

      if (response.statusCode == 200) {
        final responseData = jsonDecode(response.body);
        apiToken.value = responseData['access_token'];

        final prefs = await SharedPreferences.getInstance();
        await prefs.setString('apiToken', apiToken.value);

        print('‚úÖ Auth Success');
      } else {
        print('‚ùå Auth Failed: ${response.statusCode}');
        throw Exception('Auth failed');
      }
    } catch (e) {
      print('üö´ Error calling Auth API: $e');
      rethrow;
    } finally {
      isLoading.value = false;
      isRefreshingToken.value = false;
    }
  }

  // ‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ 401 Error
  Future<http.Response> _makeAuthenticatedRequest({
    required Future<http.Response> Function() request,
    int maxRetries = 1,
  }) async {
    for (int attempt = 0; attempt <= maxRetries; attempt++) {
      try {
        final response = await request();

        if (response.statusCode == 401 && attempt < maxRetries) {
          print('üîê Token expired, refreshing... (attempt ${attempt + 1})');
          await callAuthAPI();
          continue; // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
        }

        return response;
      } catch (e) {
        if (attempt == maxRetries) rethrow;
        print('‚ö†Ô∏è Request failed, retrying... (attempt ${attempt + 1})');
        await Future.delayed(Duration(milliseconds: 500));
      }
    }

    throw Exception('Max retry attempts reached');
  }

  Map<String, dynamic>? findDiseaseByCode(String code) {
    try {
      return summaryList.firstWhere((item) => item['cd_code'] == code);
    } catch (e) {
      return null;
    }
  }

  void resetDiseaseSummaryValues() {
    diseaseHypertensionCount.value = 0;
    diseaseHypertensionPercent.value = 0;
    diseaseHypertensionDisplay.value = '-';

    diseaseDiabetesCount.value = 0;
    diseaseDiabetesPercent.value = 0;
    diseaseDiabetesDisplay.value = '-';

    diseaseObesityCount.value = 0;
    diseaseObesityPercent.value = 0;
    diseaseObesityDisplay.value = '-';

    diseaseKidneyCount.value = 0;
    diseaseKidneyPercent.value = 0;
    diseaseKidneyDisplay.value = '-';

    diseaseHeartCount.value = 0;
    diseaseHeartPercent.value = 0;
    diseaseHeartDisplay.value = '-';

    diseaseStrokeCount.value = 0;
    diseaseStrokePercent.value = 0;
    diseaseStrokeDisplay.value = '-';

    diseaseCholesterolCount.value = 0;
    diseaseCholesterolPercent.value = 0;
    diseaseCholesterolDisplay.value = '-';

    diseaseEmphysemaCount.value = 0;
    diseaseEmphysemaPercent.value = 0;
    diseaseEmphysemaDisplay.value = '-';

    diseaseCancerCount.value = 0;
    diseaseCancerPercent.value = 0;
    diseaseCancerDisplay.value = '-';
  }

  Future<void> fetchGroupByCdCode({required int fiscalYear}) async {
    //debugPrint('apiToken: ${apiToken.value}');

    print('check_access_level = $check_access_level');

    // final url;
    // print('‡∏Ñ‡∏¥‡∏ß‡∏£‡∏µ‡πà  $query');
    // final fiscalParam = 'fiscal_year=$fiscalYear';

    final isAllHospital = hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000';
    // final hasQuery = query != null && query!.trim().isNotEmpty;

//     String queryString = '$fiscalParam';

//     if (check_access_level == '5') {
//       // ‡πÑ‡∏°‡πà‡∏°‡∏µ query ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
//     } else if (check_access_level == '4') {
//       queryString += '&$querylv4';
//     } else if (check_access_level == '3') {
//       if (hasQuery) queryString += '&$query';
//     } else {
//       queryString += '&organization_code=$hospitalCode';
//       // if (hasQuery) queryString += '&$query';
//     }

// // ‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
//     if (isAllHospital && !hasQuery && !(check_access_level == '3' || check_access_level == '4')) {
//       queryString += '&organization_code=$hospitalCode';
//     }

//     url = Uri.parse('$baseurl/api/summary/group-by-cd-code?$queryString');

//     final headers = {
//       'Content-Type': 'application/json',
//       'Authorization': 'Bearer ${apiToken.value}',
//     };

// --- ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡πÅ‡∏ó‡∏ô query string ---
    Map<String, dynamic> body = {
      'fiscal_year': fiscalYear,
    };

    if (check_access_level == '5') {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    } else if (check_access_level == '4') {
      body.addAll({
        'org_province_code': querylv4
      });
    } else if (check_access_level == '3') {
      // if (hasQuery)
      body.addAll({
        'org_province_code': query
      });
    } else {
      body.addAll({
        'organization_code': [
          hospitalCode
          // "11147" // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•,
        ]
      });
      // if (hasQuery) body.addAll({'query': query});
    }

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
    // if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    final url = Uri.parse('$baseurl/api/summary/group-by-cd-code');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      // final response = await client.get(url, headers: headers);
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );

      // if (response.statusCode == 401) {
      //   //debugPrint('üîê Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á refresh...');
      //   await callAuthAPI(); // ‡∏£‡∏±‡∏ö token ‡πÉ‡∏´‡∏°‡πà
      //   // return await fetchGroupByCdCode(fiscalYear: fiscalYear); // üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà
      // }
      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);
        final dataList = List<Map<String, dynamic>>.from(data['data']);
        summaryList.clear();
        summaryList.assignAll(dataList);

        resetDiseaseSummaryValues();
        for (var item in dataList) {
          final String code = item['cd_code'];
          final String name = item['cd_display'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
          final int count = item['count'] ?? 0;
          final double percent = (item['percent'] ?? 0).toDouble();
          // print('[DEBUG] cd_code=$code, name="$name", count=$count, percent=$percent');
          switch (code) {
            case '002': //‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á
              diseaseHypertensionDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á';
              diseaseHypertensionCount.value = count;
              diseaseHypertensionPercent.value = percent;
              break;
            case '001': //‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô
              diseaseDiabetesDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô';
              diseaseDiabetesCount.value = count;
              diseaseDiabetesPercent.value = percent;
              break;
            case '027': //‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏•‡∏á‡∏û‡∏∏‡∏á
              diseaseObesityDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏•‡∏á‡∏û‡∏∏‡∏á';
              diseaseObesityCount.value = count;
              diseaseObesityPercent.value = percent;
              break;
            case '009': //‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á
              diseaseKidneyDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á';
              diseaseKidneyCount.value = count;
              diseaseKidneyPercent.value = percent;
              break;
            case '005': //‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á//‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à
              final cleanedName = name.trim();
              if (cleanedName == '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à') {
                diseaseHeartDisplay.value = cleanedName.isNotEmpty ? cleanedName : '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à';
                diseaseHeartCount.value = count;
                diseaseHeartPercent.value = percent;
              }
              if (cleanedName == '‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á') {
                diseaseStrokeDisplay.value = cleanedName.isNotEmpty ? cleanedName : '‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á';
                diseaseStrokeCount.value = count;
                diseaseStrokePercent.value = percent;
              }
              break;
            case '014': //‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á
              diseaseCholesterolDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á';
              diseaseCholesterolCount.value = count;
              diseaseCholesterolPercent.value = percent;
              break;
            case '008': //‡πÇ‡∏£‡∏Ñ‡∏ñ‡∏∏‡∏á‡∏•‡∏°‡πÇ‡∏õ‡πà‡∏á‡∏û‡∏≠‡∏á
              diseaseEmphysemaDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡∏ñ‡∏∏‡∏á‡∏•‡∏°‡πÇ‡∏õ‡πà‡∏á‡∏û‡∏≠‡∏á';
              diseaseEmphysemaCount.value = count;
              diseaseEmphysemaPercent.value = percent;
              break;
            case '006': //‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á
              diseaseCancerDisplay.value = name.isNotEmpty ? name : '‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á';
              diseaseCancerCount.value = count;
              diseaseCancerPercent.value = percent;
              break;
            case '026': // ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤
              e_cigaretteDisplay.value = name.isNotEmpty ? name : '‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤';
              e_cigaretteCount.value = count;
              e_cigarettePercent.value = percent;
              break;

            default:
              //debugPrint('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å cd_code: $code');
              break;
          }
        }

        //debugPrint('‚úÖ Summary Data Loaded');
      } else {
        //debugPrint('‚ùå Failed to fetch summary: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      //debugPrint('üö´ Error fetching summary: $e');
    }
  }

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• group-by-region-and-cd
  RxList<Map<String, dynamic>> healthRegionCdSummaryList = <Map<String, dynamic>>[].obs;
  RxMap<int, Map<String, int>> healthRegionDiseaseData = <int, Map<String, int>>{}.obs;
  RxMap<int, Map<String, int>> healthRegionDiseaseTableData = <int, Map<String, int>>{}.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseHypertensionDisplay = ''.obs;
  RxInt healthDiseaseHypertensionCount = 0.obs;
  RxDouble healthDiseaseHypertensionPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseDiabetesDisplay = ''.obs;
  RxInt healthDiseaseDiabetesCount = 0.obs;
  RxDouble healthDiseaseDiabetesPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏•‡∏á‡∏û‡∏∏‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseObesityDisplay = ''.obs;
  RxInt healthDiseaseObesityCount = 0.obs;
  RxDouble healthDiseaseObesityPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseKidneyDisplay = ''.obs;
  RxInt healthDiseaseKidneyCount = 0.obs;
  RxDouble healthDiseaseKidneyPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseHeartDisplay = ''.obs;
  RxInt healthDiseaseHeartCount = 0.obs;
  RxDouble healthDiseaseHeartPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseStrokeDisplay = ''.obs;
  RxInt healthDiseaseStrokeCount = 0.obs;
  RxDouble healthDiseaseStrokePercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseCholesterolDisplay = ''.obs;
  RxInt healthDiseaseCholesterolCount = 0.obs;
  RxDouble healthDiseaseCholesterolPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏ñ‡∏∏‡∏á‡∏•‡∏°‡πÇ‡∏õ‡πà‡∏á‡∏û‡∏≠‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseEmphysemaDisplay = ''.obs;
  RxInt healthDiseaseEmphysemaCount = 0.obs;
  RxDouble healthDiseaseEmphysemaPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthDiseaseCancerDisplay = ''.obs;
  RxInt healthDiseaseCancerCount = 0.obs;
  RxDouble healthDiseaseCancerPercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  RxString healthE_cigaretteDisplay = ''.obs;
  RxInt healthE_cigaretteCount = 0.obs;
  RxDouble healthE_cigarettePercent = 0.0.obs;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö health region)
  void resetHealthDiseaseSummaryValues() {
    healthDiseaseHypertensionCount.value = 0;
    healthDiseaseHypertensionPercent.value = 0.0;
    healthDiseaseDiabetesCount.value = 0;
    healthDiseaseDiabetesPercent.value = 0.0;
    healthDiseaseObesityCount.value = 0;
    healthDiseaseObesityPercent.value = 0.0;
    healthDiseaseKidneyCount.value = 0;
    healthDiseaseKidneyPercent.value = 0.0;
    healthDiseaseHeartCount.value = 0;
    healthDiseaseHeartPercent.value = 0.0;
    healthDiseaseStrokeCount.value = 0;
    healthDiseaseStrokePercent.value = 0.0;
    healthDiseaseCholesterolCount.value = 0;
    healthDiseaseCholesterolPercent.value = 0.0;
    healthDiseaseEmphysemaCount.value = 0;
    healthDiseaseEmphysemaPercent.value = 0.0;
    healthDiseaseCancerCount.value = 0;
    healthDiseaseCancerPercent.value = 0.0;
    healthE_cigaretteCount.value = 0;
    healthE_cigarettePercent.value = 0.0;
  }

  Future<void> fetchGroupByRegionAndCd({required int fiscalYear}) async {
    print('check_access_level = $check_access_level');

    final isAllHospital = hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000';

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    Map<String, dynamic> body = {
      'fiscal_year': fiscalYear,
    };

    // if (check_access_level == '5') {
    //   // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    // } else if (check_access_level == '4') {
    //   body.addAll({
    //     'org_province_code': querylv4
    //   });
    // } else if (check_access_level == '3') {
    //   body.addAll({
    //     'org_province_code': query
    //   });
    // } else {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    // // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
    // if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    final url = Uri.parse('$baseurl/api/summary/group-by-region-and-cd');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      // client.post(url, headers: headers, body: jsonEncode(body));

      // if (response.statusCode == 401) {
      //   //debugPrint('üîê Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á refresh...');
      //   await callAuthAPI(); // ‡∏£‡∏±‡∏ö token ‡πÉ‡∏´‡∏°‡πà
      //   // return await fetchGroupByRegionAndCd(fiscalYear: fiscalYear); // üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà
      // }

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);
        final dataList = List<Map<String, dynamic>>.from(data['data']);

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÑ‡∏ß‡πâ
        healthRegionCdSummaryList.clear();
        healthRegionCdSummaryList.assignAll(dataList);

        // Reset ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•
        resetHealthDiseaseSummaryValues();

        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        Map<int, Map<String, int>> healthRegionDiseaseMap = {};

        // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
        Map<int, Map<String, int>> healthRegionDiseaseTableMap = {};

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
        for (var regionData in dataList) {
          final int regionId = regionData['region_id'] ?? 0;
          final int total = regionData['total'] ?? 0;
          final List<dynamic> cdDisplayList = regionData['cd_display'] ?? [];

          // print('[DEBUG] Processing region_id=$regionId, total=$total');

          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡∏ô‡∏µ‡πâ
          healthRegionDiseaseMap[regionId] = {};
          healthRegionDiseaseTableMap[regionId] = {};

          // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
          for (var cdItem in cdDisplayList) {
            final String cdDisplay = cdItem['cd_display'] ?? '';
            final int count = cdItem['count'] ?? 0;

            // print('[DEBUG] region_id=$regionId, disease="$cdDisplay", count=$count');

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
            healthRegionDiseaseMap[regionId]![cdDisplay] = count;

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡∏à‡∏±‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏£‡∏Ñ‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô)
            String diseaseKey = '';
            switch (cdDisplay) {
              case '‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á':
                diseaseKey = 'hypertension';
                healthDiseaseHypertensionDisplay.value = cdDisplay;
                healthDiseaseHypertensionCount.value += count; // ‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ
                break;
              case '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô':
                diseaseKey = 'diabetes';
                healthDiseaseDiabetesDisplay.value = cdDisplay;
                healthDiseaseDiabetesCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏•‡∏á‡∏û‡∏∏‡∏á':
                diseaseKey = 'obesity';
                healthDiseaseObesityDisplay.value = cdDisplay;
                healthDiseaseObesityCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á':
                diseaseKey = 'kidney';
                healthDiseaseKidneyDisplay.value = cdDisplay;
                healthDiseaseKidneyCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à':
                diseaseKey = 'heart';
                healthDiseaseHeartDisplay.value = cdDisplay;
                healthDiseaseHeartCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á':
                diseaseKey = 'stroke';
                healthDiseaseStrokeDisplay.value = cdDisplay;
                healthDiseaseStrokeCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á':
                diseaseKey = 'cholesterol';
                healthDiseaseCholesterolDisplay.value = cdDisplay;
                healthDiseaseCholesterolCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡∏ñ‡∏∏‡∏á‡∏•‡∏°‡πÇ‡∏õ‡πà‡∏á‡∏û‡∏≠‡∏á':
                diseaseKey = 'copd'; // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                healthDiseaseEmphysemaDisplay.value = cdDisplay;
                healthDiseaseEmphysemaCount.value += count;
                break;
              case '‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á':
                diseaseKey = 'cancer';
                healthDiseaseCancerDisplay.value = cdDisplay;
                healthDiseaseCancerCount.value += count;
                break;
              case '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤':
                diseaseKey = 'e_cigarette';
                healthE_cigaretteDisplay.value = cdDisplay;
                healthE_cigaretteCount.value += count;
                break;
              default:
                print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡πÇ‡∏£‡∏Ñ: $cdDisplay');
                continue;
            }

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            if (diseaseKey.isNotEmpty) {
              healthRegionDiseaseTableMap[regionId]![diseaseKey] = count;
            }
          }
        }

        // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
        final totalAllRegions = healthRegionCdSummaryList.fold<int>(0, (sum, item) => sum + ((item['total'] ?? 0) as int));
        if (totalAllRegions > 0) {
          healthDiseaseHypertensionPercent.value = (healthDiseaseHypertensionCount.value / totalAllRegions * 100);
          healthDiseaseDiabetesPercent.value = (healthDiseaseDiabetesCount.value / totalAllRegions * 100);
          healthDiseaseObesityPercent.value = (healthDiseaseObesityCount.value / totalAllRegions * 100);
          healthDiseaseKidneyPercent.value = (healthDiseaseKidneyCount.value / totalAllRegions * 100);
          healthDiseaseHeartPercent.value = (healthDiseaseHeartCount.value / totalAllRegions * 100);
          healthDiseaseStrokePercent.value = (healthDiseaseStrokeCount.value / totalAllRegions * 100);
          healthDiseaseCholesterolPercent.value = (healthDiseaseCholesterolCount.value / totalAllRegions * 100);
          healthDiseaseEmphysemaPercent.value = (healthDiseaseEmphysemaCount.value / totalAllRegions * 100);
          healthDiseaseCancerPercent.value = (healthDiseaseCancerCount.value / totalAllRegions * 100);
          healthE_cigarettePercent.value = (healthE_cigaretteCount.value / totalAllRegions * 100);
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡∏†‡∏π‡∏°‡∏¥‡∏†‡∏≤‡∏Ñ‡πÑ‡∏ß‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£)
        healthRegionDiseaseData.value = healthRegionDiseaseMap;

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏°‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
        healthRegionDiseaseTableData.value = healthRegionDiseaseTableMap;

        //debugPrint('‚úÖ Region and CD Summary Data Loaded');
      } else {
        //debugPrint('‚ùå Failed to fetch region and cd summary: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      //debugPrint('üö´ Error fetching region and cd summary: $e');
    }
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏Ñ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
  int getDiseaseCountByHealthRegion(int regionId, String diseaseKey) {
    return healthRegionDiseaseTableData.value[regionId]?[diseaseKey] ?? 0;
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
  List<Map<String, dynamic>> getHealthRegionTableData() {
    List<Map<String, dynamic>> tableData = [];

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    // for (int regionId in healthRegionDiseaseTableData.value.keys) {
    //   tableData.add({
    //     'region_name': '‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà $regionId',
    //     'region_id': regionId,
    //     'diabetes': getDiseaseCountByHealthRegion(regionId, 'diabetes'),
    //     'hypertension': getDiseaseCountByHealthRegion(regionId, 'hypertension'),
    //     'cholesterol': getDiseaseCountByHealthRegion(regionId, 'cholesterol'),
    //     'copd': getDiseaseCountByHealthRegion(regionId, 'copd'),
    //     'obesity': getDiseaseCountByHealthRegion(regionId, 'obesity'),
    //     'cancer': getDiseaseCountByHealthRegion(regionId, 'cancer'),
    //     'e_cigarette': getDiseaseCountByHealthRegion(regionId, 'e_cigarette'),
    //     'heart': getDiseaseCountByHealthRegion(regionId, 'heart'),
    //     'stroke': getDiseaseCountByHealthRegion(regionId, 'stroke'),
    //     'kidney': getDiseaseCountByHealthRegion(regionId, 'kidney'),
    //   });
    // }

    for (int regionId = 1; regionId <= 13; regionId++) {
      tableData.add({
        'region_name': '‡πÄ‡∏Ç‡∏ï‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà $regionId',
        'region_id': regionId,
        'diabetes': getDiseaseCountByHealthRegion(regionId, 'diabetes'),
        'hypertension': getDiseaseCountByHealthRegion(regionId, 'hypertension'),
        'kidney': getDiseaseCountByHealthRegion(regionId, 'kidney'),
        'heart': getDiseaseCountByHealthRegion(regionId, 'heart'),
        'stroke': getDiseaseCountByHealthRegion(regionId, 'stroke'),
        'copd': getDiseaseCountByHealthRegion(regionId, 'copd'),
        'cholesterol': getDiseaseCountByHealthRegion(regionId, 'cholesterol'),
        'obesity': getDiseaseCountByHealthRegion(regionId, 'obesity'),
        'e_cigarette': getDiseaseCountByHealthRegion(regionId, 'e_cigarette'),
      });
    }
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° region_id
    tableData.sort((a, b) => a['region_id'].compareTo(b['region_id']));

    return tableData;
  }

  //--------
  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• group-by-organization-and-cd
  final RxList<Map<String, dynamic>> healthOrgCdSummaryList = <Map<String, dynamic>>[].obs;
  final RxMap<String, Map<String, int>> healthOrgDiseaseData = <String, Map<String, int>>{}.obs;
  final RxMap<String, Map<String, int>> healthOrgDiseaseTableData = <String, Map<String, int>>{}.obs;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î)
  void resetHealthOrgDiseaseSummaryValues() {
    healthOrgDiseaseData.clear();
    healthOrgDiseaseTableData.clear();
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• group-by-organization-and-cd
  Future<void> fetchGroupByOrganizationAndCd({required int fiscalYear, int? regionid, orgProvinceCode}) async {
    // ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° body
    // final Map<String, dynamic> body = {
    //   'fiscal_year': fiscalYear,
    //   // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° access level ‡∏´‡∏£‡∏∑‡∏≠ hospitalCode ‡πÉ‡∏´‡πâ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    //   'organization_code': [ hospitalCode ],
    //   'org_province_code': query,
    // };

    final isAllHospital = hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000';

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    Map<String, dynamic> body = {
      'fiscal_year': fiscalYear,
      'region_id': regionid ?? 0,
      'org_province_code': queryprovince
    };

    // if (check_access_level == '5') {
    //   // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    // } else if (check_access_level == '4') {
    //   body.addAll({
    //     'org_province_code': querylv4
    //   });
    // } else if (check_access_level == '3') {
    //   body.addAll({
    //     'org_province_code': query
    //   });
    // } else {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    // // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
    // if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    final url = Uri.parse('$baseurl/api/summary/group-by-organization-and-cd');
    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      final resp = await client.post(url, headers: headers, body: jsonEncode(body));

      if (resp.statusCode == 401) {
        await callAuthAPI();
        return fetchGroupByOrganizationAndCd(fiscalYear: fiscalYear);
      }

      if (resp.statusCode != 200) {
        // handle error...
        return;
      }

      final decoded = utf8.decode(resp.bodyBytes);
      final data = jsonDecode(decoded);
      final List<Map<String, dynamic>> dataList = List<Map<String, dynamic>>.from(data['data']);

      // ‡πÄ‡∏Å‡πá‡∏ö raw data
      healthOrgCdSummaryList
        ..clear()
        ..addAll(dataList);

      // reset maps
      resetHealthOrgDiseaseSummaryValues();

      // ‡∏™‡∏£‡πâ‡∏≤‡∏á temp maps
      final Map<String, Map<String, int>> orgDiseaseMap = {};
      final Map<String, Map<String, int>> orgDiseaseTableMap = {};

      for (var org in dataList) {
        final String orgCode = org['organization_code'] ?? '';
        final String orgName = org['organization_name'] ?? '';
        final int total = org['total'] ?? 0;
        final List<dynamic> cds = org['cd_display'] ?? [];

        orgDiseaseMap[orgCode] = {};
        orgDiseaseTableMap[orgCode] = {};

        for (var item in cds) {
          final cdName = item['cd_display'] as String? ?? '';
          final count = item['count'] as int? ?? 0;

          // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏¢‡∏Å‡∏ï‡∏≤‡∏° organization
          orgDiseaseMap[orgCode]![cdName] = count;

          // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô key ‡∏ï‡∏≤‡∏°‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö region function
          String key = '';
          switch (cdName) {
            case '‡πÇ‡∏£‡∏Ñ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á':
              key = 'hypertension';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô':
              key = 'diabetes';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏•‡∏á‡∏û‡∏∏‡∏á':
              key = 'obesity';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á':
              key = 'kidney';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡∏´‡∏±‡∏ß‡πÉ‡∏à':
              key = 'heart';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡∏´‡∏•‡∏≠‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏°‡∏≠‡∏á':
              key = 'stroke';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á':
              key = 'cholesterol';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡∏ñ‡∏∏‡∏á‡∏•‡∏°‡πÇ‡∏õ‡πà‡∏á‡∏û‡∏≠‡∏á':
              key = 'copd';
              break;
            case '‡πÇ‡∏£‡∏Ñ‡∏°‡∏∞‡πÄ‡∏£‡πá‡∏á':
              key = 'cancer';
              break;
            case '‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ö‡∏∏‡∏´‡∏£‡∏µ‡πà‡πÑ‡∏ü‡∏ü‡πâ‡∏≤':
              key = 'e_cigarette';
              break;
            default:
              continue;
          }

          orgDiseaseTableMap[orgCode]![key] = count;
        }
      }

      // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï RxMaps
      healthOrgDiseaseData.value = orgDiseaseMap;
      healthOrgDiseaseTableData.value = orgDiseaseTableMap;

      // ‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì % ‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏£‡∏∏‡∏õ‡∏≠‡∏∑‡πà‡∏ô‡πÜ ‡∏Å‡πá‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡∏à‡∏≤‡∏Å‡∏ô‡∏µ‡πâ
    } catch (e) {
      // handle exception...
      print('Error fetchGroupByOrganizationAndCd: $e');
    }
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á count ‡πÉ‡∏ô‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  int getDiseaseCountByOrganization(String orgCode, String diseaseKey) {
    return healthOrgDiseaseTableData.value[orgCode]?[diseaseKey] ?? 0;
  }

// ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏≤‡∏£‡∏≤‡∏á
  List<Map<String, dynamic>> getOrganizationTableData() {
    final List<Map<String, dynamic>> table = [];
    for (var org in healthOrgCdSummaryList) {
      final code = org['organization_code'] as String;
      final provincecode = org['province_code'] as String? ?? '';
      final provincename = getProvinceName(provincecode);
      final registerdatetime = org['register_datetime'] ?? '';
      final stattus = org['status'] as String? ?? '';
      print('‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å: $provincecode ‚Üí $provincename');
      table.add({
        'organization_code': code,
        'organization_name': org['organization_name'],
        'province_name': provincename,
        'hypertension': getDiseaseCountByOrganization(code, 'hypertension'),
        'diabetes': getDiseaseCountByOrganization(code, 'diabetes'),
        'kidney': getDiseaseCountByOrganization(code, 'kidney'),
        'heart': getDiseaseCountByOrganization(code, 'heart'),
        'stroke': getDiseaseCountByOrganization(code, 'stroke'),
        'copd': getDiseaseCountByOrganization(code, 'copd'),
        'cholesterol': getDiseaseCountByOrganization(code, 'cholesterol'),
        'obesity': getDiseaseCountByOrganization(code, 'obesity'),
        'e_cigarette': getDiseaseCountByOrganization(code, 'e_cigarette'),
        'cancer': getDiseaseCountByOrganization(code, 'cancer'),
        'register_datetime': registerdatetime,
        'status': stattus,
        'total': org['total'],
      });
    }
    return table;
  }
  // List<Map<String, dynamic>> getOrganizationTableData() {
  //   // 1. ‡∏™‡∏£‡πâ‡∏≤‡∏á map ‡∏£‡∏´‡∏±‡∏™‚Üí‡∏ä‡∏∑‡πà‡∏≠ (‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠)
  //   final Map<String, String> codeToName = {};
  //   for (var org in healthOrgCdSummaryList) {
  //     final code = org['organization_code'] as String;
  //     codeToName.putIfAbsent(code, () => org['organization_name'] as String);
  //   }

  //   // 2. ‡πÄ‡∏≠‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏°‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏á numeric ascending
  //   final codes = codeToName.keys.toList()
  //     ..sort((a, b) {
  //       final ai = int.tryParse(a) ?? 0;
  //       final bi = int.tryParse(b) ?? 0;
  //       return ai.compareTo(bi);
  //     });

  //   // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏•‡∏¥‡∏™‡∏ï‡πå‡πÅ‡∏ñ‡∏ß‡∏ï‡∏≤‡∏°‡∏£‡∏´‡∏±‡∏™
  //   final table = <Map<String, dynamic>>[];
  //   for (var code in codes) {
  //     final diseaseMap = healthOrgDiseaseTableData.value[code] ?? {};
  //     table.add({
  //       'organization_code': code,
  //       'organization_name': codeToName[code],
  //       'hypertension': diseaseMap['hypertension'] ?? 0,
  //       'diabetes': diseaseMap['diabetes'] ?? 0,
  //       'kidney': diseaseMap['kidney'] ?? 0,
  //       'heart': diseaseMap['heart'] ?? 0,
  //       'stroke': diseaseMap['stroke'] ?? 0,
  //       'copd': diseaseMap['copd'] ?? 0,
  //       'cholesterol': diseaseMap['cholesterol'] ?? 0,
  //       'obesity': diseaseMap['obesity'] ?? 0,
  //       'e_cigarette': diseaseMap['e_cigarette'] ?? 0,
  //       'total': // ‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏°‡∏µ total ‡∏Å‡πá‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏ï‡∏≠‡∏ô fetchGroupByOrganizationAndCd
  //           (diseaseMap.values.fold<int>(0, (s, v) => s + v)),
  //     });
  //   }

  //   return table;
  // }

  Map<String, String> provinceNames = {
    '10': '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£',
    '11': '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£',
    '12': '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ',
    '13': '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ',
    '14': '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤',
    '15': '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á',
    '16': '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ',
    '17': '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ',
    '18': '‡∏ä‡∏±‡∏¢‡∏ô‡∏≤‡∏ó',
    '19': '‡∏™‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏µ',
    '20': '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ',
    '21': '‡∏£‡∏∞‡∏¢‡∏≠‡∏á',
    '22': '‡∏à‡∏±‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ',
    '23': '‡∏ï‡∏£‡∏≤‡∏î',
    '24': '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤',
    '25': '‡∏õ‡∏£‡∏≤‡∏à‡∏µ‡∏ô‡∏ö‡∏∏‡∏£‡∏µ',
    '26': '‡∏ô‡∏Ñ‡∏£‡∏ô‡∏≤‡∏¢‡∏Å',
    '27': '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß',
    '30': '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤',
    '31': '‡∏ö‡∏∏‡∏£‡∏µ‡∏£‡∏±‡∏°‡∏¢‡πå',
    '32': '‡∏™‡∏∏‡∏£‡∏¥‡∏ô‡∏ó‡∏£‡πå',
    '33': '‡∏®‡∏£‡∏µ‡∏™‡∏∞‡πÄ‡∏Å‡∏©',
    '34': '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ',
    '35': '‡∏¢‡πÇ‡∏™‡∏ò‡∏£',
    '36': '‡∏ä‡∏±‡∏¢‡∏†‡∏π‡∏°‡∏¥',
    '37': '‡∏≠‡∏≥‡∏ô‡∏≤‡∏à‡πÄ‡∏à‡∏£‡∏¥‡∏ç',
    '38': '‡∏ö‡∏∂‡∏á‡∏Å‡∏≤‡∏¨',
    '39': '‡∏´‡∏ô‡∏≠‡∏á‡∏ö‡∏±‡∏ß‡∏•‡∏≥‡∏†‡∏π',
    '40': '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô',
    '41': '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ',
    '42': '‡πÄ‡∏•‡∏¢',
    '43': '‡∏´‡∏ô‡∏≠‡∏á‡∏Ñ‡∏≤‡∏¢',
    '44': '‡∏°‡∏´‡∏≤‡∏™‡∏≤‡∏£‡∏Ñ‡∏≤‡∏°',
    '45': '‡∏£‡πâ‡∏≠‡∏¢‡πÄ‡∏≠‡πá‡∏î',
    '46': '‡∏Å‡∏≤‡∏¨‡∏™‡∏¥‡∏ô‡∏ò‡∏∏‡πå',
    '47': '‡∏™‡∏Å‡∏•‡∏ô‡∏Ñ‡∏£',
    '48': '‡∏ô‡∏Ñ‡∏£‡∏û‡∏ô‡∏°',
    '49': '‡∏°‡∏∏‡∏Å‡∏î‡∏≤‡∏´‡∏≤‡∏£',
    '50': '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà',
    '51': '‡∏•‡∏≥‡∏û‡∏π‡∏ô',
    '52': '‡∏•‡∏≥‡∏õ‡∏≤‡∏á',
    '53': '‡∏≠‡∏∏‡∏ï‡∏£‡∏î‡∏¥‡∏ï‡∏ñ‡πå',
    '54': '‡πÅ‡∏û‡∏£‡πà',
    '55': '‡∏ô‡πà‡∏≤‡∏ô',
    '56': '‡∏û‡∏∞‡πÄ‡∏¢‡∏≤',
    '57': '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢',
    '60': '‡∏ô‡∏Ñ‡∏£‡∏™‡∏ß‡∏£‡∏£‡∏Ñ‡πå',
    '61': '‡∏≠‡∏∏‡∏ó‡∏±‡∏¢‡∏ò‡∏≤‡∏ô‡∏µ',
    '62': '‡∏Å‡∏≥‡πÅ‡∏û‡∏á‡πÄ‡∏û‡∏ä‡∏£',
    '63': '‡∏ï‡∏≤‡∏Å',
    '64': '‡∏™‡∏∏‡πÇ‡∏Ç‡∏ó‡∏±‡∏¢',
    '65': '‡∏û‡∏¥‡∏©‡∏ì‡∏∏‡πÇ‡∏•‡∏Å',
    '66': '‡∏û‡∏¥‡∏à‡∏¥‡∏ï‡∏£',
    '67': '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏π‡∏£‡∏ì‡πå',
    '70': '‡∏£‡∏≤‡∏ä‡∏ö‡∏∏‡∏£‡∏µ',
    '71': '‡∏Å‡∏≤‡∏ç‡∏à‡∏ô‡∏ö‡∏∏‡∏£‡∏µ',
    '72': '‡∏™‡∏∏‡∏û‡∏£‡∏£‡∏ì‡∏ö‡∏∏‡∏£‡∏µ',
    '73': '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
    '74': '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£',
    '75': '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏á‡∏Ñ‡∏£‡∏≤‡∏°',
    '76': '‡πÄ‡∏û‡∏ä‡∏£‡∏ö‡∏∏‡∏£‡∏µ',
    '77': '‡∏õ‡∏£‡∏∞‡∏à‡∏ß‡∏ö‡∏Ñ‡∏µ‡∏£‡∏µ‡∏Ç‡∏±‡∏ô‡∏ò‡πå',
    '80': '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä',
    '81': '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà',
    '82': '‡∏û‡∏±‡∏á‡∏á‡∏≤',
    '83': '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï',
    '84': '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ',
    '85': '‡∏£‡∏∞‡∏ô‡∏≠‡∏á',
    '86': '‡∏ä‡∏∏‡∏°‡∏û‡∏£',
    '90': '‡∏™‡∏á‡∏Ç‡∏•‡∏≤',
    '91': '‡∏™‡∏ï‡∏π‡∏•',
    '92': '‡∏ï‡∏£‡∏±‡∏á',
    '93': '‡∏û‡∏±‡∏ó‡∏•‡∏∏‡∏á',
    '94': '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ',
    '95': '‡∏¢‡∏∞‡∏•‡∏≤',
    '96': '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™',
  };

// 2. ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  String getProvinceName(String code) {
    return provinceNames[code] ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î';
  }

  List<Map<String, dynamic>> get organizationTableData {
    return getOrganizationTableData();
    //final table = _ctrl.organizationTableData;
  }

  //--------

  Future<void> fetchNCDList({
    String? name,
    String? cid,
    String? cdCode,
    String? status,
    DateTime? startDate,
    DateTime? endDate,
    int page = 1,
    int pageSize = 20,
  }) async {
    if (page < 1) return;

    // ‡∏à‡∏≥‡∏Ñ‡πà‡∏≤ filter ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
    if (startDate != null) lastStartDate = startDate;
    if (endDate != null) lastEndDate = endDate;
    if (name != null) lastName.value = name;
    if (cid != null) lastCid.value = cid;
    if (cdCode != null) lastCdCode.value = cdCode;
    if (status != null) laststatus.value = status;
    final usedName = name ?? lastName.value;
    final usedCid = cid ?? lastCid.value;
    // final usedCdCode = cdCode ?? lastCdCode.value;
    // ‡πÄ‡∏≠‡∏≤‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏à‡∏£‡∏¥‡∏á
    // final usedStart = startDate ?? lastStartDate;
    // final usedEnd = endDate ?? lastEndDate;
    final usedStart = startDate ?? null;
    final usedEnd = endDate ?? null;

    if (apiToken.value.isEmpty) {
      await callAuthAPI();
    }
    final url = Uri.parse('$baseurl/api/n_ncd_list');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };
    final body = {
      'patient_name_text': usedName,
      'cid': usedCid,
      'cd_code': cdCode,
      "status_display": status,
      'page': page,
      'page_size': pageSize,
      "organization_code":
          // '24683', // ‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
          hospitalCode,
      if (usedStart != null && usedEnd != null)
        'register_datetime': {
          'start': usedStart.toUtc().toIso8601String(),
          'end': usedEnd.toUtc().toIso8601String(),
        },
    };

    try {
      isNCDLoading.value = true;
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      // client.post(
      //   url,
      //   headers: headers,
      //   body: jsonEncode(body),
      // );

      // if (response.statusCode == 401) {
      //   await callAuthAPI();
      //   return fetchNCDList(
      //     name: name,
      //     cid: cid,
      //     cdCode: cdCode,
      //     page: page,
      //   );
      // }

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);
        ncdList.assignAll(List<Map<String, dynamic>>.from(data['data']));
        currentPage.value = data['page'];
        totalPages.value = data['total_pages'];
      } else {
        ncdList.clear();
      }
    } catch (e) {
      print('üö´ Error fetching NCD list: $e');
    } finally {
      isNCDLoading.value = false;
    }
  }

// ‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡πâ‡∏≤ API ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<void> fetchAllNCDListAlternative() async {
    try {
      isNCDLoading(true);

      List<dynamic> allData = [];
      int currentPage = 1;
      int totalPages = 1;

      // Loop ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πâ‡∏≤
      while (currentPage <= totalPages) {
        final response = await http.get(
          Uri.parse('${baseurl}/api/ncd/list?page=$currentPage&size=100'),
          headers: {
            'Authorization': 'Bearer ${apiToken.value}',
            'Content-Type': 'application/json',
          },
        );

        if (response.statusCode == 200) {
          final data = json.decode(response.body);

          // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
          if (data['data'] != null) {
            allData.addAll(List<dynamic>.from(data['data']));
          }

          // ‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï totalPages ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ
          if (data['totalPages'] != null) {
            totalPages = data['totalPages'];
          } else if (data['pagination'] != null && data['pagination']['totalPages'] != null) {
            totalPages = data['pagination']['totalPages'];
          }

          currentPage++;
        } else {
          throw Exception('Failed to load NCD data: ${response.statusCode}');
        }
      }

      ncdList.value = List<Map<String, dynamic>>.from(allData);
      print('Fetched total ${allData.length} NCD records from $totalPages pages');
    } catch (e) {
      print('Error fetching all NCD data: $e');
    } finally {
      isNCDLoading(false);
    }
  }

  // ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£ Rx (‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡πÉ‡∏ô GetX Controller ‡πÄ‡∏ä‡πà‡∏ô NCDsgetX)
  final RxInt totalGender = 0.obs;
  final RxString genderF = ''.obs;
  final RxInt countF = 0.obs;
  final RxDouble percentF = 0.0.obs;
  final RxString genderM = ''.obs;
  final RxInt countM = 0.obs;
  final RxDouble percentM = 0.0.obs;
  // final RxBool isGenderLoading = false.obs;

  Future<void> fetchGroupByGender({required int fiscalYear}) async {
    if (apiToken.value.isEmpty) {
      await callAuthAPI();
    }

    final isAllHospital = hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000';

    // --- ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡πÅ‡∏ó‡∏ô query string ---
    Map<String, dynamic> body = {
      'fiscal_year': fiscalYear,
    };

    if (check_access_level == '5') {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    } else if (check_access_level == '4') {
      body.addAll({
        'org_province_code': querylv4
      });
    } else if (check_access_level == '3') {
      // if (hasQuery)
      body.addAll({
        'org_province_code': query
      });
    } else {
      body.addAll({
        'organization_code': [
          hospitalCode
        ]
      });
      // if (hasQuery) body.addAll({'query': query});
    }

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
    // if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    final url = Uri.parse('$baseurl/api/summary/group-by-gender');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      // final response = await client.get(url, headers: headers);
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      // client.post(url, headers: headers, body: jsonEncode(body));
      // if (response.statusCode == 401) {
      //   //debugPrint('üîê Token ‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏ ‡∏Å‡∏≥‡∏•‡∏±‡∏á refresh...');
      //   await callAuthAPI(); // ‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä token
      //   return await fetchGroupByGender(fiscalYear: fiscalYear); // üîÅ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ã‡πâ‡∏≥
      // }
      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);
        //debugPrint('‚úÖ Gender Data: $data');
        final List<dynamic> genderData = data['data'];
        totalGender.value = data['total'] ?? 0;
        countM.value = 0;
        countF.value = 0;
        percentM.value = 0.0;
        percentF.value = 0.0;

        for (var item in genderData) {
          final int count = item['count'] ?? 0;
          final String gender = item['gender'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•';
          final double percent = (item['percent'] ?? 0).toDouble();
          switch (gender) {
            case 'F':
              genderF.value = gender;
              countF.value = count;
              percentF.value = percent.isNaN ? 0.0 : percent;
              break;
            case 'M':
              genderM.value = gender;
              countM.value = count;
              percentM.value = percent.isNaN ? 0.0 : percent;
              break;
            default:
              //debugPrint('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å gender: $gender');
              break;
          }
        }
        //debugPrint('‚úÖ Gender summary loaded, total: ${totalGender.value}');
      } else {
        //debugPrint('‚ùå Failed to fetch gender summary: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      //debugPrint('üö´ Error fetching gender summary: $e');
    }
  }

  var regionCounts = <double>[].obs;
  var totalRegion = 0.obs;

  Future<void> fetchGroupByRegion({required int fiscalYear}) async {
    // if (apiToken.value.isEmpty) {
    //   await callAuthAPI();
    // }

    // final url;
    // final fiscalParam = 'fiscal_year=$fiscalYear';

    // if (hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000') {
    //   if (query != null && query!.trim().isNotEmpty) {
    //     if (check_access_level == '5') {
    //       url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam');
    //     } else if (check_access_level == '3') {
    //       url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam&$query');
    //     } else {
    //       url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam&organization_code=$hospitalCode&$query');
    //     }
    //   } else {
    //     url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam&organization_code=$hospitalCode');
    //   }
    // } else if (query != null && query!.trim().isNotEmpty) {
    //   if (check_access_level == '5') {
    //     url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam');
    //   } else if (check_access_level == '3') {
    //     url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam&$query');
    //   } else {
    //     url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam&organization_code=$hospitalCode&$query');
    //   }
    // } else {
    //   url = Uri.parse('$baseurl/api/summary/group-by-region?$fiscalParam&organization_code=$hospitalCode');
    // }

    // final fiscalParam = 'fiscal_year=$fiscalYear';

    final isAllHospital = hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000';
    // final hasQuery = query != null && query!.trim().isNotEmpty;

//     String queryString = '$fiscalParam';

//     if (check_access_level == '5') {
//       // ‡πÑ‡∏°‡πà‡∏°‡∏µ query ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
//     } else if (check_access_level == '4') {
//       queryString += '&$querylv4';
//     } else if (check_access_level == '3') {
//       // if (hasQuery)
//       queryString += '&$query';
//     } else {
//       queryString += '&organization_code=$hospitalCode';
//       // if (hasQuery) queryString += '&$query';
//     }

// // ‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
//     if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
//       queryString += '&organization_code=$hospitalCode';
//     }

//     final url = Uri.parse('$baseurl/api/summary/group-by-region?$queryString');

//     final headers = {
//       'Content-Type': 'application/json',
//       'Authorization': 'Bearer ${apiToken.value}',
//     };

//     try {
//       final response = await client.get(url, headers: headers);

// --- ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡πÅ‡∏ó‡∏ô query string ---
    Map<String, dynamic> body = {
      'fiscal_year': fiscalYear,
    };

    if (check_access_level == '5') {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    } else if (check_access_level == '4') {
      body.addAll({
        'org_province_code': querylv4
      });
    } else if (check_access_level == '3') {
      // if (hasQuery)
      body.addAll({
        'org_province_code': query
      });
    } else {
      body.addAll({
        'organization_code': [
          hospitalCode
        ]
      });
      // if (hasQuery) body.addAll({'query': query});
    }

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
    // if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    final url = Uri.parse('$baseurl/api/summary/group-by-region');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      // final response = await client.get(url, headers: headers);
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      // client.post(url, headers: headers, body: jsonEncode(body));

      // if (response.statusCode == 401) {
      //   await callAuthAPI();
      //   // return fetchGroupByRegion(fiscalYear: fiscalYear);
      // }

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);
        totalRegion.value = data['total'];

        final counts = List.generate(13, (_) => 0.0);
        if (data['data'] is List) {
          for (var item in data['data']) {
            final int regionId = item['region_id'] ?? 0;
            final double count = (item['count'] ?? 0).toDouble();
            if (regionId >= 1 && regionId <= 13) {
              counts[regionId - 1] = count;
            }
          }
          regionCounts.value = counts;
        }
      } else {
        //debugPrint('‚ùå Fetch Region Failed: ${response.statusCode}');
      }
    } catch (e) {
      //debugPrint('üö´ Error fetchGroupByRegion: $e');
    }
  }

  RxList<double> regionRatePer1000 = <double>[].obs;

  Future<void> fetchRegionRatePer1000({required int fiscalYear}) async {
    // if (apiToken.value.isEmpty) {
    //   await callAuthAPI();
    // }

    // final fiscalParam = 'fiscal_year=$fiscalYear';

    final isAllHospital = hospitalCode == null || hospitalCode == '25039' || hospitalCode == '99999' || hospitalCode == '00000';
    // final hasQuery = query != null && query!.trim().isNotEmpty;

    // String queryString = '$fiscalParam';

    // if (check_access_level == '5') {
    //   // ‡πÑ‡∏°‡πà‡∏°‡∏µ query ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
    // } else if (check_access_level == '4') {
    //   queryString += '&$querylv4';
    // } else if (check_access_level == '3') {
    //   // if (hasQuery)
    //   queryString += '&$query';
    // } else {
    //   queryString += '&organization_code=$hospitalCode';
    //   // if (hasQuery) queryString += '&$query';
    // }

// // ‡πÅ‡∏Å‡πâ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
//     if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
//       queryString += '&organization_code=$hospitalCode';
//     }

//     final url = Uri.parse('$baseurl/api/summary/group-by-region?$queryString');

//     final headers = {
//       'Content-Type': 'application/json',
//       'Authorization': 'Bearer ${apiToken.value}',
//     };

//     try {
//       final response = await client.get(url, headers: headers);

// --- ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡πÅ‡∏ó‡∏ô query string ---
    Map<String, dynamic> body = {
      'fiscal_year': fiscalYear,
    };

    if (check_access_level == '5') {
      // ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°
    } else if (check_access_level == '4') {
      body.addAll({
        'org_province_code': querylv4
      });
    } else if (check_access_level == '3') {
      // if (hasQuery)
      body.addAll({
        'org_province_code': query
      });
    } else {
      body.addAll({
        'organization_code': [
          hospitalCode
        ]
      });
      // if (hasQuery) body.addAll({'query': query});
    }

    // ‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏£‡∏ì‡∏µ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô level 3 ‡∏´‡∏£‡∏∑‡∏≠ 4
    // if (isAllHospital && !(check_access_level == '3' || check_access_level == '4')) {
    //   body.addAll({
    //     'organization_code': [
    //       hospitalCode
    //     ]
    //   });
    // }

    final url = Uri.parse('$baseurl/api/summary/group-by-region');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      // final response = await client.get(url, headers: headers);
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      //  client.post(url, headers: headers, body: jsonEncode(body));

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);
        final items = List<Map<String, dynamic>>.from(data['data']);

        List<double> rates = List.filled(13, 0.0);

        for (var item in items) {
          int regionId = item['region_id'];
          double rate = (item['rate_per_1000'] ?? 0).toDouble();
          if (regionId >= 1 && regionId <= 13) {
            rates[regionId - 1] = rate;
          }
        }

        regionRatePer1000.assignAll(rates);
      } else {
        //debugPrint('‚ùå Failed to fetch: ${response.statusCode}');
      }
    } catch (e) {
      //debugPrint('üö´ Error: $e');
    }
  }

  //------
  // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•
  RxList<Map<String, dynamic>> hospitalList = <Map<String, dynamic>>[].obs;
  RxBool isLoadingHospitals = false.obs;

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  Future<List<Map<String, dynamic>>> fetchAllHospitals() async {
    if (apiToken.value.isEmpty) {
      await callAuthAPI();
    }

    List<Map<String, dynamic>> allHospitals = [];
    int currentPage = 1;
    int totalPages = 1;

    try {
      isLoadingHospitals.value = true;

      do {
        final url = Uri.parse('$baseurl/api/hospital');
        final headers = {
          'Content-Type': 'application/json',
          'Authorization': 'Bearer ${apiToken.value}',
        };

        final body = jsonEncode({
          'page': currentPage,
          'page_size': 1000,
        });

        final response = await _makeAuthenticatedRequest(
          request: () => client.post(url, headers: headers, body: body),
        );
        // client.post(url, headers: headers, body: body);

        // if (response.statusCode == 401) {
        //   await callAuthAPI();
        //   continue; // ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏´‡∏•‡∏±‡∏á refresh token
        // }

        if (response.statusCode == 200) {
          final decoded = utf8.decode(response.bodyBytes);
          final data = jsonDecode(decoded);

          totalPages = data['total_pages'] ?? 1;
          final pageData = List<Map<String, dynamic>>.from(data['data'] ?? []);
          allHospitals.addAll(pageData);

          print('‚úÖ Loaded page $currentPage/$totalPages, hospitals: ${pageData.length}');
          currentPage++;
        } else {
          print('‚ùå Failed to fetch hospitals page $currentPage: ${response.statusCode}');
          break;
        }
      } while (currentPage <= totalPages);

      hospitalList.assignAll(allHospitals);
      print('‚úÖ Total hospitals loaded: ${allHospitals.length}');
    } catch (e) {
      print('üö´ Error fetching hospitals: $e');
    } finally {
      isLoadingHospitals.value = false;
    }

    return allHospitals;
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ï‡∏≤‡∏°‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  List<Map<String, dynamic>> getHospitalsByProvince(String provinceCode) {
    return hospitalList.where((hospital) {
      return hospital['province_code'] == provinceCode;
    }).toList();
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô‡πÉ‡∏ô‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î
  List<String> getUniqueHospitalTypesInProvince(String provinceCode) {
    final hospitalsInProvince = getHospitalsByProvince(provinceCode);
    final typeSet = <String>{};

    for (var hospital in hospitalsInProvince) {
      final typeName = hospital['hospital_type_name']?.toString();
      if (typeName != null && typeName.isNotEmpty) {
        typeSet.add(typeName);
      }
    }

    final sortedTypes = typeSet.toList()..sort();
    return [
      '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î',
      ...sortedTypes
    ];
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á 2 API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
  Future<void> fetchAllSubmissionData({
    int? fiscalYear,
    List<String>? organizationCode,
    List<String>? orgProvinceCode,
    int? regionId,
  }) async {
    print('Fetching all submission data...');

    // Reset ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡πà‡∏≠‡∏ô
    resetSubmissionSummaryValues();

    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡πâ‡∏á 2 API ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Å‡∏±‡∏ô
    await Future.wait([
      fetchSubmissionStatus(
        fiscalYear: fiscalYear,
        organizationCode: organizationCode,
        orgProvinceCode: orgProvinceCode,
        regionId: regionId,
      ),
      fetchSubmissionOverview(
        fiscalYear: fiscalYear,
        organizationCode: organizationCode,
        orgProvinceCode: orgProvinceCode,
        regionId: regionId,
      ),
    ]);

    print('‚úÖ All submission data loaded successfully');
  }

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• submission-status (‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 1)
  RxString submissionStatusTitle = ''.obs;
  RxInt submissionStatusTotal = 0.obs;
  RxInt submissionStatusTotalHospitals = 0.obs;
  RxInt submissionStatusHospitalsSubmitted = 0.obs;
  RxInt submissionStatusHospitalsNotSubmitted = 0.obs;
  RxList<Map<String, dynamic>> submissionStatusData = <Map<String, dynamic>>[].obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• submission-overview (‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 2)
  RxString submissionOverviewTitle = ''.obs;
  RxInt submissionOverviewTotal = 0.obs;
  RxInt submissionOverviewTotalHospitals = 0.obs;
  RxInt submissionOverviewHospitalsWithNcd = 0.obs;
  RxInt submissionOverviewHospitalsNeverSubmitted = 0.obs;
  RxList<Map<String, dynamic>> submissionOverviewData = <Map<String, dynamic>>[].obs;
  RxMap<String, dynamic> submissionOverviewBreakdown = <String, dynamic>{}.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
// ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 1: ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß vs ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  RxString statusSubmittedDisplay = ''.obs;
  RxInt statusSubmittedCount = 0.obs;
  RxDouble statusSubmittedPercent = 0.0.obs;

  RxString statusNotSubmittedDisplay = ''.obs;
  RxInt statusNotSubmittedCount = 0.obs;
  RxDouble statusNotSubmittedPercent = 0.0.obs;

// ‡∏Å‡∏£‡∏≤‡∏ü‡∏ó‡∏µ‡πà 2: ‡∏™‡πà‡∏á‡∏Ñ‡∏£‡∏ö‡∏á‡∏ß‡∏î, ‡∏£‡∏≠‡∏™‡πà‡∏á, ‡∏™‡πà‡∏á‡∏ä‡πâ‡∏≤
  RxString statusExcellentDisplay = ''.obs;
  RxInt statusExcellentCount = 0.obs;
  RxDouble statusExcellentPercent = 0.0.obs;

  RxString statusPendingDisplay = ''.obs;
  RxInt statusPendingCount = 0.obs;
  RxDouble statusPendingPercent = 0.0.obs;

  RxString statusLateDisplay = ''.obs;
  RxInt statusLateCount = 0.obs;
  RxDouble statusLatePercent = 0.0.obs;

// ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö loading state
  RxBool isLoadingSubmissionStatus = false.obs;
  RxBool isLoadingSubmissionOverview = false.obs;

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö reset ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
  void resetSubmissionSummaryValues() {
    // Reset submission status
    statusSubmittedCount.value = 0;
    statusSubmittedPercent.value = 0.0;
    statusNotSubmittedCount.value = 0;
    statusNotSubmittedPercent.value = 0.0;

    // Reset submission overview
    statusExcellentCount.value = 0;
    statusExcellentPercent.value = 0.0;
    statusPendingCount.value = 0;
    statusPendingPercent.value = 0.0;
    statusLateCount.value = 0;
    statusLatePercent.value = 0.0;

    // Clear data lists
    submissionStatusData.clear();
    submissionOverviewData.clear();
    submissionOverviewBreakdown.clear();
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API submission-status
  Future<void> fetchSubmissionStatus({
    int? fiscalYear,
    List<String>? organizationCode,
    List<String>? orgProvinceCode,
    int? regionId,
  }) async {
    print('Fetching submission status...');

    isLoadingSubmissionStatus.value = true;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    Map<String, dynamic> body = {};

    if (fiscalYear != null) {
      body['fiscal_year'] = fiscalYear;
    }

    // if (organizationCode != null && organizationCode.isNotEmpty) {
    //   body['organization_code'] = organizationCode;
    // }

    // if (orgProvinceCode != null && orgProvinceCode.isNotEmpty) {
    //   body['org_province_code'] = orgProvinceCode;
    // }

    // if (regionId != null) {
    //   body['region_id'] = regionId;
    // }

    final url = Uri.parse('$baseurl/api/summary/submission-status');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      // client.post(url, headers: headers, body: jsonEncode(body));

      // if (response.statusCode == 401) {
      //   await callAuthAPI(); // ‡∏£‡∏±‡∏ö token ‡πÉ‡∏´‡∏°‡πà
      //   // return await fetchSubmissionStatus(
      //   //   fiscalYear: fiscalYear,
      //   //   organizationCode: organizationCode,
      //   //   orgProvinceCode: orgProvinceCode,
      //   //   regionId: regionId,
      //   // ); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà
      // }

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
        submissionStatusTitle.value = data['title'] ?? '';
        submissionStatusTotal.value = data['total'] ?? 0;
        submissionStatusTotalHospitals.value = data['total_hospitals_in_system'] ?? 0;
        submissionStatusHospitalsSubmitted.value = data['hospitals_submitted'] ?? 0;
        submissionStatusHospitalsNotSubmitted.value = data['hospitals_not_submitted'] ?? 0;

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chart data
        final dataList = List<Map<String, dynamic>>.from(data['data'] ?? []);
        submissionStatusData.clear();
        submissionStatusData.assignAll(dataList);

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        for (var item in dataList) {
          final String name = item['name'] ?? '';
          final int value = item['value'] ?? 0;
          final double percentage = (item['percentage'] ?? 0).toDouble();

          switch (name) {
            case '‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß':
              statusSubmittedDisplay.value = name;
              statusSubmittedCount.value = value;
              statusSubmittedPercent.value = percentage;
              break;
            case '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•':
              statusNotSubmittedDisplay.value = name;
              statusNotSubmittedCount.value = value;
              statusNotSubmittedPercent.value = percentage;
              break;
            default:
              print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: $name');
          }
        }

        print('‚úÖ Submission Status Data Loaded');
        print('Total: ${submissionStatusTotal.value}');
        print('Submitted: ${statusSubmittedCount.value} (${statusSubmittedPercent.value}%)');
        print('Not Submitted: ${statusNotSubmittedCount.value} (${statusNotSubmittedPercent.value}%)');
      } else {
        print('‚ùå Failed to fetch submission status: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      print('üö´ Error fetching submission status: $e');
    } finally {
      isLoadingSubmissionStatus.value = false;
    }
  }

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API submission-overview
  Future<void> fetchSubmissionOverview({
    int? fiscalYear,
    List<String>? organizationCode,
    List<String>? orgProvinceCode,
    int? regionId,
  }) async {
    print('Fetching submission overview...');

    isLoadingSubmissionOverview.value = true;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á body ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö API
    Map<String, dynamic> body = {};

    if (fiscalYear != null) {
      body['fiscal_year'] = fiscalYear;
    }

    // if (organizationCode != null && organizationCode.isNotEmpty) {
    //   body['organization_code'] = organizationCode;
    // }

    // if (orgProvinceCode != null && orgProvinceCode.isNotEmpty) {
    //   body['org_province_code'] = orgProvinceCode;
    // }

    // if (regionId != null) {
    //   body['region_id'] = regionId;
    // }

    final url = Uri.parse('$baseurl/api/summary/submission-overview');

    final headers = {
      'Content-Type': 'application/json',
      'Authorization': 'Bearer ${apiToken.value}',
    };

    try {
      final response = await _makeAuthenticatedRequest(
        request: () => client.post(url, headers: headers, body: jsonEncode(body)),
      );
      // client.post(url, headers: headers, body: jsonEncode(body));

      // if (response.statusCode == 401) {
      //   await callAuthAPI(); // ‡∏£‡∏±‡∏ö token ‡πÉ‡∏´‡∏°‡πà
      //   return await fetchSubmissionOverview(
      //     fiscalYear: fiscalYear,
      //     organizationCode: organizationCode,
      //     orgProvinceCode: orgProvinceCode,
      //     regionId: regionId,
      //   ); // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏´‡∏°‡πà
      // }

      if (response.statusCode == 200) {
        final decoded = utf8.decode(response.bodyBytes);
        final data = jsonDecode(decoded);

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å
        submissionOverviewTitle.value = data['title'] ?? '';
        submissionOverviewTotal.value = data['total'] ?? 0;
        submissionOverviewTotalHospitals.value = data['total_hospitals_in_system'] ?? 0;
        submissionOverviewHospitalsWithNcd.value = data['hospitals_with_ncd_data'] ?? 0;
        submissionOverviewHospitalsNeverSubmitted.value = data['hospitals_never_submitted'] ?? 0;

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• breakdown
        if (data['breakdown'] != null) {
          submissionOverviewBreakdown.value = Map<String, dynamic>.from(data['breakdown']);
        }

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• chart data
        final dataList = List<Map<String, dynamic>>.from(data['data'] ?? []);
        submissionOverviewData.clear();
        submissionOverviewData.assignAll(dataList);

        // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
        for (var item in dataList) {
          final String name = item['name'] ?? '';
          final int value = item['value'] ?? 0;
          final double percentage = (item['percentage'] ?? 0).toDouble();

          switch (name) {
            case '‡∏™‡πà‡∏á‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤':
              statusExcellentDisplay.value = name;
              statusExcellentCount.value = value;
              statusExcellentPercent.value = percentage;
              break;
            case '‡∏™‡πà‡∏á‡∏•‡πà‡∏≤‡∏ä‡πâ‡∏≤':
              statusPendingDisplay.value = name;
              statusPendingCount.value = value;
              statusPendingPercent.value = percentage;
              break;
            case '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏™‡πà‡∏á':
              statusLateDisplay.value = name;
              statusLateCount.value = value;
              statusLatePercent.value = percentage;
              break;
            default:
              print('‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: $name');
          }
        }

        print('‚úÖ Submission Overview Data Loaded');
        print('Total: ${submissionOverviewTotal.value}');
        print('Excellent: ${statusExcellentCount.value} (${statusExcellentPercent.value}%)');
        print('Pending: ${statusPendingCount.value} (${statusPendingPercent.value}%)');
        print('Late: ${statusLateCount.value} (${statusLatePercent.value}%)');
      } else {
        print('‚ùå Failed to fetch submission overview: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      print('üö´ Error fetching submission overview: $e');
    } finally {
      isLoadingSubmissionOverview.value = false;
    }
  }
}

class EnvService {
  static String get apiUrl => js.context['env']?['API_URL'] ?? '';
  static String get username => js.context['env']?['API_USERNAME'] ?? '';
  static String get password => js.context['env']?['API_PASSWORD'] ?? '';
}

class HospitalController extends GetxController {
  var organizationList = <Map<String, dynamic>>[].obs;

  void logCurrentState() {
    log('üì¶ [HospitalController] organizationList: $organizationList');
    log('üì¶ [HospitalController] length: ${organizationList.length}');
  }
}
